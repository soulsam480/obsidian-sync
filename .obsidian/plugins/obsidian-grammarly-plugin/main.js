/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// plugin.ts
var import_view = require("@codemirror/view");

// node_modules/@grammarly/editor-sdk/lib/index.esm.js
function t(t2, r2, e2) {
  return r2 in t2 ? Object.defineProperty(t2, r2, { value: e2, enumerable: true, configurable: true, writable: true }) : t2[r2] = e2, t2;
}
var r = /* @__PURE__ */ new Map();
var e = class extends Error {
  constructor(r2, e2) {
    var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    super(), t(this, "args", void 0), t(this, "code", void 0), t(this, "url", void 0);
    var a2 = new URL("https://developer.grammarly.com/docs/error-explainer");
    a2.searchParams.set("code", r2.toString()), e2.forEach((t2) => a2.searchParams.append("args", function(t3) {
      if (t3 instanceof Error)
        return t3.message + "\n" + String(t3.stack);
      if (t3 == null)
        return "null";
      if (typeof t3 == "object")
        try {
          return Object.prototype.toString.call(t3);
        } catch (t4) {
        }
      return String(t3);
    }(t2))), this.stack != null && a2.searchParams.set("trace", this.stack), this.message = "".concat(n2, "Minified error #").concat(r2, ": See ").concat(a2.toString(), " for details."), this.args = e2, this.code = r2, this.url = a2.toString();
  }
  toUserMessage() {
    var t2 = r.get("".concat(this.code));
    if (t2 == null)
      return [this];
    var e2 = new Map(this.args.map((t3, r2) => ["${".concat(r2, "}"), t3]));
    return t2.split(/(\${\d+})/).filter((t3) => t3 !== "").map((t3) => {
      var r2;
      return (r2 = e2.get(t3)) !== null && r2 !== void 0 ? r2 : t3;
    });
  }
  static setMessages(t2) {
    r = t2;
  }
  static create(t2, r2) {
    var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "", a2 = arguments.length > 3 ? arguments[3] : void 0;
    a2 != null && r2.push(a2);
    var o2 = new e(t2, r2, n2);
    return o2.stack = a2 == null ? void 0 : a2.stack, o2;
  }
};
var n = /* @__PURE__ */ new WeakMap();
async function a(t2, r2, e2) {
  return await o("@grammarly/editor-sdk", t2, r2, e2);
}
async function o(t2, r2, a2, o2) {
  if (typeof window == "undefined" && o2 === void 0)
    throw new e(21, []);
  const s = new URL("https://js.grammarly.com/grammarly-editor-sdk@2.0", window.location.origin);
  r2 != null && s.searchParams.set("clientId", r2), s.searchParams.set("packageName", t2);
  const i = await async function(t3, r3) {
    const a3 = n.get(t3);
    if (a3 != null)
      return await a3;
    !function(t4) {
      t4.Grammarly == null && (t4.Grammarly = {});
    }(t3);
    const o3 = new Promise((n2, a4) => {
      try {
        let n3 = function(t4, r4) {
          return t4.document.querySelectorAll(`script[src^="${r4.replace(/\?.*$/, "")}"]`)[0];
        }(t3, r3);
        n3 != null ? o4() : (n3 = function(t4, r4) {
          const e2 = t4.document.createElement("script");
          return e2.src = r4, t4.document.head.appendChild(e2), e2;
        }(t3, r3), n3.addEventListener("load", o4), n3.addEventListener("error", function() {
          try {
            throw new e(23, []);
          } catch (t4) {
            a4(t4);
          }
        }));
      } catch (t4) {
        return a4(t4);
      }
      function o4() {
        try {
          if (t3.Grammarly == null || typeof t3.Grammarly.EditorSDK != "function")
            throw new e(22, []);
          n2(t3.Grammarly);
        } catch (t4) {
          a4(t4);
        }
      }
    });
    return n.set(t3, o3), await o3;
  }(o2 != null ? o2 : window, s.toString());
  if (r2 != null)
    return new i.EditorSDK(r2, a2);
}

// plugin.ts
var initialize = a("client_SZRuwBMe5opCznxqMQCG3q");
var initializeGrammarly = (view) => {
  initialize.then((grammarly) => {
    var _a;
    grammarly.addPlugin(view.contentDOM, {
      documentDialect: "auto-text",
      documentDomain: "academic",
      activation: "immediate"
    }, view.scrollDOM);
    var host = document.querySelector("grammarly-editor-plugin");
    var style = document.createElement("style");
    style.innerHTML = `

			.nvqxur1>:nth-child(2):not(article)
			{
				left: 80px !important;
			}

			div:has(div[aria-label="Grammarly Settings"])
			{
				left: 80px !important;
			}

			div[role="tooltip"] {
				left: 80px !important;
			}
		`;
    (_a = host == null ? void 0 : host.shadowRoot) == null ? void 0 : _a.appendChild(style);
  });
};
var GrammarlyPlugin = class {
  constructor(view) {
  }
  update(update) {
  }
  destroy() {
  }
  initialize(view) {
    return initializeGrammarly(view);
  }
};
var grammarlyPlugin = import_view.ViewPlugin.fromClass(GrammarlyPlugin);

// main.ts
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.extArray = [];
  }
  async onload() {
    (0, import_obsidian.addIcon)("grammarly", '<svg fill="currentColor"  viewBox="0 0 24 24" role="img" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" d="M24 12c0 6.627-5.373 12-12 12S0 18.627 0 12C0 5.372 5.373 0 12 0c6.628 0 12 5.372 12 12m-9.633 1.626a.81.815 0 0 0-.799.965c.071.393.44.662.84.662h1.257l.729-.102c-1.166 1.71-3.19 2.498-5.405 2.15-1.802-.282-3.35-1.502-4.003-3.205-1.483-3.865 1.34-7.556 5.02-7.556 1.916 0 3.598 1.122 4.562 2.478.277.39.763.504 1.133.248a.795.8 0 0 0 .236-1.069h.006a7.04 7.04 0 0 0-6.425-3.233c-3.508.236-6.347 3.107-6.55 6.617-.233 4.086 3.007 7.421 7.037 7.421a6.976 6.976 0 0 0 5.304-2.413l-.153.855v.773c0 .4.269.77.662.84a.814.814 0 0 0 .964-.8v-4.63h-4.415"/></svg>');
    const ribbonIconEl = this.addRibbonIcon("grammarly", "Enable Grammarly", (evt) => {
      this.enableGrammarly();
    });
    this.addCommand({
      id: "enable-grammarly",
      name: "Enable Grammarly",
      editorCallback: (editor, view) => {
        this.enableGrammarly();
      }
    });
    if (!this.ext) {
      this.ext = grammarlyPlugin;
      this.extArray = [this.ext];
      this.registerEditorExtension(this.extArray);
    }
  }
  onunload() {
  }
  enableGrammarly() {
    var _a, _b, _c;
    new import_obsidian.Notice("Grammarly has been enabled.");
    const view = (_c = (_b = (_a = this == null ? void 0 : this.app) == null ? void 0 : _a.workspace) == null ? void 0 : _b.activeLeaf) == null ? void 0 : _c.view;
    if (view != null) {
      const editorView = view.editor.cm;
      const plugin = editorView.plugin(grammarlyPlugin);
      if (plugin) {
        let tooltip_callback = function(mutations) {
          for (var i = 0; i < mutations.length; i++) {
            var mutation = mutations[i];
            if (mutation.addedNodes.length > 0) {
              for (var ii = 0; ii < mutation.addedNodes.length; ii++) {
                var node = mutation.addedNodes[ii];
                if (node.innerText == "Grammarly-powered editor") {
                  node.remove();
                }
              }
            }
          }
        };
        plugin.initialize(editorView);
        const tooltip_observer = new MutationObserver(tooltip_callback);
        var tooltip_observer_element = document.querySelector("body");
        tooltip_observer.observe(tooltip_observer_element, { childList: true });
      }
    }
  }
};
/**
 * @license
 * (c) Copyright 2022 Grammarly, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
